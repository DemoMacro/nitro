import { promises as fsp } from "node:fs";
import { resolve, dirname } from "pathe";
import type { PackageJson } from "pkg-types";
import { defineNitroPreset } from "../preset";

export const edgio = defineNitroPreset({
  extends: "node-server",
  commands: {
    deploy: "cd ./ && npm run deploy",
    preview: "cd ./ && npm run preview",
  },
  hooks: {
    async compiled(nitro) {
      /**
       * Output directory structure:
       * | .edgio (generated by Edgio CLI)
       * | edgio/prod.js
       * | public/*
       * | server/*
       * | edgio.config.js
       * | package.json
       * | routes.js
       */

      // Write edgio.config.js
      await writeFile(
        resolve(nitro.options.output.dir, "edgio.config.js"),
        `module.exports = ${JSON.stringify(
          {
            connector: "@edgio/nitropack",
            routes: "./routes.js",
          },
          null,
          2
        )}`
      );

      // Write routes.js
      await writeFile(
        resolve(nitro.options.output.dir, "routes.js"),
        `
import { isProductionBuild } from "@edgio/core/environment";
import { Router } from "@edgio/core/router";
import { nitropackRoutes } from "@edgio/nitropack";

const router = new Router().use(nitropackRoutes);

if (isProductionBuild()) {
  router.static("public");
}

export default router;
    `.trim()
      );

      // Write and prepare package.json for deployment
      await writeFile(
        resolve(nitro.options.output.dir, "package.json"),
        JSON.stringify(
          <PackageJson>{
            name: "nitropack-edgio-output",
            version: "1.0.0",
            private: true,
            scripts: {
              build: "npm i && edgio build",
              deploy: "npm i && edgio deploy",
              start: "npm i && edgio run --production",
              preview: "npm i && edgio build && edgio run --production",
            },
            devDependencies: {
              "@edgio/cli": "^7",
              "@edgio/core": "^7",
              "@edgio/nitropack": "^7",
            },
          },
          null,
          2
        )
      );
      await writeFile(
        resolve(nitro.options.output.dir, "package-lock.json"),
        ""
      );
    },
  },
});

async function writeFile(path: string, contents: string) {
  await fsp.mkdir(dirname(path), { recursive: true });
  await fsp.writeFile(path, contents, "utf8");
}
